//- Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
// Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів
//
// {
//     id: 1,
//     name: 'Leanne Graham',
//     username: 'Bret',
//     email: 'Sincere@april.biz',
//     address: {
//         street: 'Kulas Light',
//         suite: 'Apt. 556',
//         city: 'Gwenborough',
//         zipcode: '92998-3874',
//         geo: {
//             lat: '-37.3159',
//             lng: '81.1496'
//         }
//     },
//     phone: '1-770-736-8031 x56442',
//     website: 'hildegard.org',
//     company: {
//         name: 'Romaguera-Crona',
//         catchPhrase: 'Multi-layered client-server neural-net',
//         bs: 'harness real-time e-markets'
//     }
// }

class User {
    constructor(id, name, username, email, addressStreet, addressSuite, addressCity,
                addressZipcode, addressGeoLat, addressGeoLng, phone, website, companyName, companyCatchPhrase, companyBs) {
        this.id = id;
        this.name = name;
        this.username = username;
        this.email = email;
        this.address = {
            street: addressStreet,
            suite: addressSuite,
            city: addressCity,
            zipcode: addressZipcode,
            geo: {
                addressGeoLat,
                addressGeoLng
            }
        },
            this.phone = phone,
            this.website = website,
            this.company = {
                name: companyName,
                catchPhrase: companyCatchPhrase,
                bs: companyBs
            }


    }
}

let user = new User(1, 'Leanne Graham', 'Bret', "Sincere@april.biz", "Kulas Light",
    "Apt. 556", "Gwenborough", '92998-3874', "-37.3159", "81.1496",
    '1-770-736-8031 x56442', 'hildegard.org', 'Romaguera-Crona',
    'Multi-layered client-server neural-net', 'harness real-time e-markets');
console.log(user);

//=====================================================================================================================

//-  Створити функцію конструктор / клас  який описує об'єкт тегу
// Поля :
//  -назва тегу ()
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru
//
//  Таким чином описати теги
//  -a
//  -div
//  -h1
//  -span
//  -input
//  -form
//  -option
//  -select
//  Приклад результуючого об'єкту
//    {
//         titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//         attrs: [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//         {/*some props and values*/},
//         {/*...*/},
//         {/*...*/},
//         ]
//
//    }

function Tags(title, description, attributsAttr1Title, attributsAttr1Description, attributsAttr2Title, attributsAttr2Description) {
    this.title = title,
        this.description = description,
        this.attributs = [
            {titleOfAttr: attributsAttr1Title, descriptionOfAttr: attributsAttr1Description},
            {titleOfAttr: attributsAttr2Title, descriptionOfAttr: attributsAttr2Description},
        ];

}

let tagA = new Tags('Тег <a>', 'Тег <a> является одним из важных элементов HTML и предназначен для ' +
    'создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь.' +
    ' Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании' +
    ' ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.\n' +
    '\n' +
    'Для создания ссылки необходимо сообщить браузеру, что является ссылкой, а также указать адрес документа, на ' +
    'который следует сделать ссылку. В качестве значения атрибута href используется адрес документа (URL, Universal ' +
    'Resource Locator, универсальный указатель ресурсов), на который происходит переход. Адрес ссылки может быть ' +
    'абсолютным и относительным. Абсолютные адреса работают везде и всюду независимо от имени сайта или веб-страницы,' +
    ' где прописана ссылка. Относительные ссылки, как следует из их названия, построены относительно текущего документа ' +
    'или корня сайта.', 'accesskey', 'Активация ссылки с помощью комбинации клавиш.',
    'coords', 'Устанавливает координаты активной области.');

console.log(tagA);

let tagDiv = new Tags('Тег <div>', 'Элемент <div> является блочным элементом и предназначен для ' +
    'выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью' +
    '' +
    ' стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для' +
    ' тега добавить атрибут class или id с именем селектора.\n' +
    '\n' +
    'Как и при использовании других блочных элементов, содержимое тега <div> всегда начинается с новой строки. После ' +
    'него также добавляется перенос строки.', 'align', 'Задает выравнивание содержимого' +
    ' тега <div>.', 'title', 'Добавляет всплывающую подсказку к содержимому.');

console.log(tagDiv);

let tagH1 = new Tags('Тег <h1>', 'HTML предлагает шесть заголовков разного уровня, которые показывают' +
    ' относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный' +
    ' заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее ' +
    'значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, ' +
    'заголовки последующего уровня по размеру меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда' +
    ' начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед' +
    ' заголовком и после него добавляется пустое пространство.', 'align',
    'Определяет выравнивание заголовка.', 'class', 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.');

console.log(tagH1);// питання, якщо б був тільки 1 атрибут, відповідно другий undefined, як правильно зробити, щоб цього не
// було, а тільки 1 атрибут відображало?

let tagSpan = new Tags('Тег <span>', 'Тег <span> предназначен для определения строчных элементов' +
    ' документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно' +
    ' выделить часть информации внутри других тегов и установить для нее свой стиль. Например, внутри абзаца ' +
    '(тега <p>) можно изменить цвет и размер первой буквы, если добавить начальный и конечный тег <span> и определить' +
    ' для него стиль текста. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу ' +
    'стилей, а для тега добавить атрибут class или id с именем селектора.', 'accesskey',
    'Позволяет получить доступ к элементу с помощью заданного сочетания клавиш.', 'class',
    'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.');

console.log(tagSpan);

let tagInput = new Tags('Тег <input>', 'Тег <input> является одним из разносторонних элементов формы и ' +
    'позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input>' +
    ' предназначен для создания текстовых полей, различных кнопок, переключателей и флажков. Хотя элемент <input> не ' +
    'требуется помещать внутрь контейнера <form>, определяющего форму, но если введенные пользователем данные должны' +
    ' быть отправлены на сервер, где их обрабатывает серверная программа, то указывать <form> обязательно. То же самое' +
    ' обстоит и в случае обработки данных с помощью клиентских приложений, например, скриптов на языке JavaScript.\n' +
    '\n' +
    'Основной атрибут тега <input>, определяющий вид элемента — type. Он позволяет задавать следующие элементы формы: ' +
    'текстовое поле (text), поле с паролем (password), переключатель (radio), флажок (checkbox), скрытое поле (hidden),' +
    ' кнопка (button), кнопка для отправки формы (submit), кнопка для очистки формы (reset), поле для отправки файла ' +
    '(file) и кнопка с изображением (image). Для каждого элемента существует свой список атрибутов, которые определяют' +
    ' его вид и характеристики. Кроме того, в HTML5 добавлено еще более десятка новых элементов.', 'accept',
    'Устанавливает фильтр на типы файлов, которые вы можете отправить через поле загрузки файлов.',
    'accesskey', 'Переход к элементу с помощью комбинации клавиш.');

console.log(tagInput);

let tagForm = new Tags('Тег <form>', 'Тег <form> устанавливает форму на веб-странице. Форма предназначена ' +
    'для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на' +
    ' сервер, с помощью клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по' +
    ' своему усмотрению.\n' +
    '\n' +
    'Документ может содержать любое количество форм, но одновременно на сервер может быть отправлена только одна форма.' +
    ' По этой причине данные форм должны быть независимы друг от друга.\n' +
    '\n' +
    'Для отправки формы на сервер используется кнопка Submit, того же можно добиться, если нажать клавишу Enter в ' +
    'пределах формы. Если кнопка Submit отсутствует в форме, клавиша Enter имитирует ее использование.\n' +
    '\n' +
    'Когда форма отправляется на сервер, управление данными передается программе, заданной атрибутом action тега <form>.' +
    ' Предварительно браузер подготавливает информацию в виде пары «имя=значение», где имя определяется атрибутом name' +
    ' тега <input>, а значение введено пользователем или установлено в поле формы по умолчанию. Если для отправки данных' +
    ' используется метод GET, то адресная строка может принимать следующий вид.\n' +
    '\n' +
    'http://www.htmlbook.ru/cgi-bin/handler.cgi?nick=%C2%E0%ED%FF+%D8%E0%EF%EE%F7%EA%E8%ED&page=5\n' +
    '\n' +
    'Параметры перечисляются после вопросительного знака, указанного после адреса CGI-программы и разделяются между ' +
    'собой символом амперсанда (&). Нелатинские символы преобразуются в шестнадцатеричное представление (в форме %HH,' +
    ' где HH — шестнадцатеричный код для значения ASCII-символа), пробел заменяется на плюс (+).\n' +
    '\n' +
    'Допускается внутрь контейнера <form> помещать другие теги, при этом сама форма никак не отображается на ' +
    'веб-странице, видны только ее элементы и результаты вложенных тегов.', 'accept-charset',
    'Устанавливает кодировку, в которой сервер может принимать и обрабатывать данные.',
    'action', 'Адрес программы или документа, который обрабатывает данные формы.')


console.log(tagForm);

let tagOption = new Tags('Тег <option>', 'Тег <option> определяет отдельные пункты списка, создаваемого ' +
    'с помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также' +
    ' может изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить' +
    ' элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
    'disabled', 'Заблокировать для доступа элемент списка.', 'label',
    'Указание метки пункта списка.');

console.log(tagOption);

let tagSelect = new Tags('Тег <select>', 'Тег <select> позволяет создать элемент интерфейса в виде' +
    ' раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит' +
    ' от использования атрибута size тега <select>, который устанавливает высоту списка. Ширина списка определяется ' +
    'самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Каждый пункт создается' +
    ' с помощью тега <option>, который должен быть вложен в контейнер <select>. Если планируется отправлять данные' +
    ' списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным' +
    ' списка идет обращение через скрипты.', 'accesskey', 'Позволяет перейти к списку' +
    ' с помощью некоторого сочетания клавиш.', 'autofocus', 'Устанавливает, что список' +
    ' получает фокус после загрузки страницы.');

console.log(tagSelect);